{"version":3,"sources":["containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","state","search","employees","Employees","filteredEmployees","sortEmployees","sortedEmployees","sort","a","b","name","toLowerCase","console","log","setState","handleInputChange","e","target","value","handleSubmit","preventDefault","filterEmployees","searchTerm","filter","employee","includes","className","onSubmit","this","type","class","placeholder","onChange","scope","onClick","map","id","salary","age","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sLAiGeA,E,4MA9FbC,MAAQ,CACJC,OAAQ,GACVC,UAAWC,EACXC,kBAAmB,I,EAOrBC,cAAgB,WAOd,IAAMC,EAAkB,EAAKN,MAAME,UAAUK,MAN7C,SAAiBC,EAAGC,GAClB,OAAID,EAAEE,KAAKC,cAAgBF,EAAEC,KAAKC,cAAsB,EACpDF,EAAEC,KAAKC,cAAgBH,EAAEE,KAAKC,eAAuB,EAElD,KAGTC,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CACZZ,UAAWI,K,EAIfS,kBAAoB,SAACC,GAAO,IAAD,EACHA,EAAEC,OAAjBP,EADkB,EAClBA,KAAMQ,EADY,EACZA,MACb,EAAKJ,SAAL,eACKJ,EAAOQ,K,EAGdC,aAAe,SAACH,GACZA,EAAEI,iBACF,EAAKC,mB,EAGTA,gBAAkB,WACd,IAAMC,EAAa,EAAKtB,MAAMC,OAAOU,cACrC,EAAKG,SAAS,CACVZ,UAAW,EAAKF,MAAME,UAAUqB,QAAO,SAACC,GAAD,OAC3CA,EAASd,KAAKC,cAAcc,SAASH,S,uDAOvC,OACE,yBAAKI,UAAU,aACb,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACb,0BAAMC,SAAUC,KAAKT,cACnB,yBAAKO,UAAU,cACb,2BACEG,KAAK,OACLC,MAAM,eACNC,YAAY,iBACZrB,KAAK,SACLQ,MAAOU,KAAK5B,MAAMC,OAClB+B,SAAUJ,KAAKb,qBAGnB,4BAAQc,KAAK,SAASH,UAAU,mBAAhC,aAMN,2BAAOA,UAAU,SACf,2BAAOA,UAAU,cACf,4BACE,wBAAIO,MAAM,OAAV,MACA,wBAAIA,MAAM,MAAMC,QAASN,KAAKvB,eAA9B,QAGA,wBAAI4B,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,SAGJ,+BACGL,KAAK5B,MAAME,UAAUiC,KAAI,SAACX,GAAD,OACxB,4BACE,wBAAIS,MAAM,OAAOT,EAASY,IAC1B,4BAAKZ,EAASd,MACd,4BAAKc,EAASa,QACd,4BAAKb,EAASc,gB,GArFbC,aCSJC,MATf,WAEE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.d1a3e0e1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Employees from \"../employees.json\";\r\nclass Home extends Component {\r\n  state = {\r\n      search: \"\",\r\n    employees: Employees,\r\n    filteredEmployees: []\r\n  };\r\n\r\n  //   componentDidMount() {\r\n  //     this.sortEmployees();\r\n  //   }\r\n\r\n  sortEmployees = () => {\r\n    function compare(a, b) {\r\n      if (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\r\n      if (b.name.toLowerCase() > a.name.toLowerCase()) return -1;\r\n\r\n      return 0;\r\n    }\r\n    const sortedEmployees = this.state.employees.sort(compare);\r\n    console.log(sortedEmployees);\r\n    this.setState({\r\n      employees: sortedEmployees,\r\n    });\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    const {name, value} = e.target;\r\n    this.setState({\r\n        [name]: value,\r\n    });\r\n  };\r\n  handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      this.filterEmployees();\r\n  }\r\n\r\n  filterEmployees = () => {\r\n      const searchTerm = this.state.search.toLowerCase();\r\n      this.setState({\r\n          employees: this.state.employees.filter((employee) => \r\n      employee.name.toLowerCase().includes(searchTerm)\r\n      ),\r\n      });\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Container\">\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n              <form onSubmit={this.handleSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    placeholder=\"Search by name\"\r\n                    name=\"search\"\r\n                    value={this.state.search}\r\n                    onChange={this.handleInputChange}\r\n                  />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <table className=\"table\">\r\n            <thead className=\"thead-dark\">\r\n              <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\" onClick={this.sortEmployees}>\r\n                  Name\r\n                </th>\r\n                <th scope=\"col\">Salary</th>\r\n                <th scope=\"col\">Age</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.employees.map((employee) => (\r\n                <tr>\r\n                  <th scope=\"row\">{employee.id}</th>\r\n                  <td>{employee.name}</td>\r\n                  <td>{employee.salary}</td>\r\n                  <td>{employee.age}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport Home from \"./containers/Home\";\nfunction App() {\n\n  return (\n    <div>\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}